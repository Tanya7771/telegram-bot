import openai
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware

# üîë –¢–æ–∫–µ–Ω—ã –¥–ª—è API
API_TOKEN = "7836824191:AAFQzh2w3cLrwsoP0WxRfsfAd1g7VbIIW-s"
OPENAI_API_KEY = "Isk-proj-VVVxu5QtZI-YM8Bx6EL2qYngH_vUMZ5Sme-7N0mNoRgntQQL5sMPDcc-eWmqa7-OG2tucNqIkQT3BlbkFJfmamxDtFoUus8MJRBQ2Mrjeg6GelmQdhVmsghqDF2-G30b8j8bGomRGORNNJVXpuPieYvUwQ4A"

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
openai.api_key = OPENAI_API_KEY

# üéØ –§–∏–ª—å—Ç—Ä: –∫–∞–∫–∏–µ —Ç–µ–º—ã –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç?
ALLOWED_TOPICS = {
    "post_ideas": "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–ù–∞–ø–∏—à–∏ –º–Ω–µ –∏–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤ [–∫–∞–∫–∏–µ]\".",
    "video_scenarios": "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ [–∫–∞–∫–æ–º—É]\".",
    "content_plan": "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –¥–ª—è [–≤–∞—à–∞ –Ω–∏—à–∞]\".",
    "headlines": "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–ù–∞–ø–∏—à–∏ –º–Ω–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è [–≤–∞—à–∞ –Ω–∏—à–∞]\".",
    "audience_analysis": "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–°–¥–µ–ª–∞–π –º–Ω–µ –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è [–≤–∞—à–∞ –Ω–∏—à–∞]\".",
    "seo_tips": "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–ö–∞–∫ –º–Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è [–≤–∞—à–∞ –Ω–∏—à–∞].\"",
    "visual_ideas": "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–ù–∞–ø–∏—à–∏ –º–Ω–µ –∏–¥–µ–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∞ –¥–ª—è [–≤–∞—à–∞ –Ω–∏—à–∞]\".",
    "storytelling": "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–ù–∞–ø–∏—à–∏ –º–Ω–µ –∏–¥–µ–∏ —Å—Ç–æ—Ä–∏—Ç–µ–π–ª–ª–∏–Ω–≥–∞ –¥–ª—è [–≤–∞—à–∞ –Ω–∏—à–∞]\".",
    "generate_text": "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è [–≤–∞—à–∞ –Ω–∏—à–∞]\"."
}

# üóÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("bot.db") as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT
        )""")
        await db.commit()

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
async def save_user(user_id, username):
    async with aiosqlite.connect("bot.db") as db:
        await db.execute("INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)", (user_id, username))
        await db.commit()

# üé≠ Inline-–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
menu_inline = InlineKeyboardMarkup(row_width=2)
menu_inline.add(
    InlineKeyboardButton("üìå –ò–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤", callback_data="post_ideas"),
    InlineKeyboardButton("üé¨ –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ", callback_data="video_scenarios"),
    InlineKeyboardButton("üìù –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", callback_data="content_plan"),
    InlineKeyboardButton("üéØ –ó–∞–≥–æ–ª–æ–≤–∫–∏", callback_data="headlines"),
    InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏", callback_data="audience_analysis"),
    InlineKeyboardButton("üìà SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="seo_tips"),
    InlineKeyboardButton("üì∑ –ò–¥–µ–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∞", callback_data="visual_ideas"),
    InlineKeyboardButton("üìñ –°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥", callback_data="storytelling"),
    InlineKeyboardButton("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞", callback_data="generate_text")
)

# üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å GPT-4 (–ø–æ SMM)
async def generate_ai_response(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"

# üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    print(f"–ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /start –æ—Ç {message.from_user.username}")
    await save_user(message.from_user.id, message.from_user.username)
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äì SocialMind AI.
SMM-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞, –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∏–¥–µ–π.

–ß—Ç–æ —è —É–º–µ—é:
üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∏ Stories
üîπ –ü–∏—à—É —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è Reels, TikTok –∏ YouTube
üîπ –°–æ–∑–¥–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—ã –¥–ª—è –ª—é–±–æ–π –Ω–∏—à–∏
üîπ –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ü–µ–ø–ª—è—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã
üîπ –ü–æ–º–æ–≥–∞—é —Å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–º–∏ –≤–æ—Ä–æ–Ω–∫–∞–º–∏ –∏ —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥–æ–º
üîπ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —Ç—Ä–µ–Ω–¥—ã
üîπ –î–µ–ª–∞—é SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏ –ø–æ–¥–±–∏—Ä–∞—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å!
    """
    await message.answer(welcome_text, reply_markup=menu_inline)

# üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@dp.callback_query_handler(lambda call: call.data in ALLOWED_TOPICS)
async def ask_user_input(call: types.CallbackQuery):
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∑–∞–ø—Ä–æ—Å: {call.data}")
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    question = ALLOWED_TOPICS[call.data]
    await call.message.answer(f"{question} –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    await bot.register_next_step_handler(call.message, handle_user_response)

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def handle_user_response(message: types.Message):
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å: {message.text}")
    current_query = message.text
    if current_query:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º—ã –∑–∞–ø—Ä–æ—Å–∞
        response = await generate_ai_response(f"–û—Ç–≤–µ—Ç—å –∫–∞–∫ SMM-—ç–∫—Å–ø–µ—Ä—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ {message.text}")
        print(f"–û—Ç–≤–µ—Ç –æ—Ç GPT: {response}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        await message.answer(response)
    else:
        await message.answer("üí¨ –£—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ SMM, –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞.")

# üéØ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True)


