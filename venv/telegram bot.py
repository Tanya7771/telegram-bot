import openai
import requests
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import executor

# üîë –¢–æ–∫–µ–Ω—ã –¥–ª—è API
API_TOKEN = "7946096138:AAEXkWbDiyaaxwbB8dGS-Fwjh4Do0j83BXY"
OPENAI_API_KEY = "–í–ê–®_–ö–õ–Æ–ß_OPENAIsk-proj-VVVxu5QtZI-YM8Bx6EL2qYngH_vUMZ5Sme-7N0mNoRgntQQL5sMPDcc-eWmqa7-OG2tucNqIkQT3BlbkFJfmamxDtFoUus8MJRBQ2Mrjeg6GelmQdhVmsghqDF2-G30b8j8bGomRGORNNJVXpuPieYvUwQ4A"

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

# üéØ –§–∏–ª—å—Ç—Ä: –∫–∞–∫–∏–µ —Ç–µ–º—ã –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç?
ALLOWED_TOPICS = [
    "SMM", "–∫–æ–Ω—Ç–µ–Ω—Ç", "—Å–æ—Ü—Å–µ—Ç–∏", "Instagram", "TikTok", "YouTube",
    "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "—Ä–µ–∫–ª–∞–º–∞", "–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ", "–∞—É–¥–∏—Ç–æ—Ä–∏—è", "—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥",
    "SEO", "–≤–∏–∑—É–∞–ª", "–ø–æ—Å—Ç—ã", "Stories", "Reels", "—Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥"
]

# üóÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("bot.db") as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT
        )""")
        await db.commit()

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
async def save_user(user_id, username):
    async with aiosqlite.connect("bot.db") as db:
        await db.execute("INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)", (user_id, username))
        await db.commit()

# üé≠ Inline-–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
menu_inline = InlineKeyboardMarkup(row_width=2)
menu_inline.add(
    InlineKeyboardButton("üìå –ò–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤", callback_data="post_ideas"),
    InlineKeyboardButton("üé¨ –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ", callback_data="video_scenarios"),
    InlineKeyboardButton("üìù –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", callback_data="content_plan"),
    InlineKeyboardButton("üéØ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã", callback_data="headlines"),
    InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏", callback_data="audience_analysis"),
    InlineKeyboardButton("üìà SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="seo_tips"),
    InlineKeyboardButton("üì∑ –ò–¥–µ–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∞", callback_data="visual_ideas"),
    InlineKeyboardButton("üìñ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥", callback_data="storytelling"),
    InlineKeyboardButton("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞", callback_data="generate_text")
)

# üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å GPT-4 (—Ç–æ–ª—å–∫–æ –ø–æ SMM)
async def generate_ai_response(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞."

# üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await save_user(message.from_user.id, message.from_user.username)
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äì SocialMind AI.
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö.

–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –∑–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ SMM!
    """
    await message.answer(welcome_text, reply_markup=menu_inline)

# üìù –§—É–Ω–∫—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda call: call.data == "post_ideas")
async def post_ideas(call: types.CallbackQuery):
    await call.message.answer("üí° –ò–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤:\n1. –ò—Å—Ç–æ—Ä–∏—è –±—Ä–µ–Ω–¥–∞\n2. –ó–∞–∫—É–ª–∏—Å—å–µ\n3. –ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç")

@dp.callback_query_handler(lambda call: call.data == "video_scenarios")
async def video_scenarios(call: types.CallbackQuery):
    await call.message.answer("üé• –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ:\n1. –î–æ/–ü–æ—Å–ª–µ\n2. –ß–µ–ª–ª–µ–Ω–¥–∂–∏\n3. –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Ç—Ä–µ–Ω–¥—ã")

@dp.callback_query_handler(lambda call: call.data == "content_plan")
async def content_plan(call: types.CallbackQuery):
    await call.message.answer("üìÖ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω:\n1. –ü–Ω: –ò—Å—Ç–æ—Ä–∏—è –±—Ä–µ–Ω–¥–∞\n2. –í—Ç: –ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç\n3. –°—Ä: –†–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏")

@dp.callback_query_handler(lambda call: call.data == "headlines")
async def headlines(call: types.CallbackQuery):
    await call.message.answer("‚ö°Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏:\n1. '–¢—ã –Ω–µ –ø–æ–≤–µ—Ä–∏—à—å, –Ω–æ‚Ä¶'\n2. '–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å X –∑–∞ 10 –º–∏–Ω—É—Ç?'")

@dp.callback_query_handler(lambda call: call.data == "audience_analysis")
async def audience_analysis(call: types.CallbackQuery):
    await call.message.answer("üìä –ê–Ω–∞–ª–∏–∑ –¶–ê:\n1. –ò–∑—É—á–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤\n2. –ü—Ä–æ–≤–µ–¥–∏ –æ–ø—Ä–æ—Å—ã")

@dp.callback_query_handler(lambda call: call.data == "seo_tips")
async def seo_tips(call: types.CallbackQuery):
    await call.message.answer("üîé SEO:\n1. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏\n2. –ò—Å–ø–æ–ª—å–∑—É–π alt-—Ç–µ–≥–∏")

@dp.callback_query_handler(lambda call: call.data == "visual_ideas")
async def visual_ideas(call: types.CallbackQuery):
    await call.message.answer("üì∑ –ò–¥–µ–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∞:\n1. –ú–∏–Ω–∏–º–∞–ª–∏–∑–º\n2. –¶–≤–µ—Ç–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã\n3. –î–∏–Ω–∞–º–∏—á–Ω—ã–µ –∫–æ–ª–ª–∞–∂–∏")

@dp.callback_query_handler(lambda call: call.data == "storytelling")
async def storytelling(call: types.CallbackQuery):
    await call.message.answer("üìñ –°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥:\n1. –ì–µ—Ä–æ–π + –∫–æ–Ω—Ñ–ª–∏–∫—Ç\n2. –ü—Ä–æ–±–ª–µ–º–∞ ‚Üí —Ä–µ—à–µ–Ω–∏–µ")

# ‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
@dp.callback_query_handler(lambda call: call.data == "generate_text")
async def ask_generate_text(call: types.CallbackQuery):
    await call.message.answer("üîπ –í–≤–µ–¥–∏ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")

@dp.message_handler(lambda message: message.reply_to_message and "üîπ –í–≤–µ–¥–∏ —Ç–µ–º—É" in message.reply_to_message.text)
async def process_generate_text(message: types.Message):
    prompt = f"–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É: {message.text}"
    response = await generate_ai_response(prompt)
    await message.answer(response)

# üß† AI-–æ—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ SMM)
@dp.message_handler()
async def handle_user_message(message: types.Message):
    if any(topic.lower() in message.text.lower() for topic in ALLOWED_TOPICS):
        response = await generate_ai_response(f"–û—Ç–≤–µ—Ç—å –∫–∞–∫ SMM-—ç–∫—Å–ø–µ—Ä—Ç: {message.text}")
        await message.answer(response)
    else:
        await message.answer("‚ùå –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ—Ü—Å–µ—Ç—è–º–∏, –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º!")

# üéØ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True)
    
    
    
    
    
    
    
    API_TOKEN = "7836824191:AAFQzh2w3cLrwsoP0WxRfsfAd1g7VbIIW-s"
OPENAI_API_KEY = "Isk-proj-VVVxu5QtZI-YM8Bx6EL2qYngH_vUMZ5Sme-7N0mNoRgntQQL5sMPDcc-eWmqa7-OG2tucNqIkQT3BlbkFJfmamxDtFoUus8MJRBQ2Mrjeg6GelmQdhVmsghqDF2-G30b8j8bGomRGORNNJVXpuPieYvUwQ4A"